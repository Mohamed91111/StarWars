{"version":3,"sources":["assets/villain.svg","assets/dark.jpg","components/Nav.jsx","components/Fav.jsx","components/List.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledNav","styled","nav","Nav","changePage","onClick","src","darthVated","alt","StyledContainer","div","StyledCard","StyledButton","button","Fav","currentFav","RemoveFavorite","console","log","elements","map","e","key","name","className","eye_color","birth_year","List","people","addFavPeople","gender","StyledSearchArea","tempPeople","Home","currentFavorite","useState","setPeople","input","setInput","useEffect","temp2","peopleApi","url","axios","get","then","res","push","data","results","next","catch","error","filterList","filter","el","toLowerCase","match","htmlFor","value","onChange","target","x","element","some","window","alert","bin","Content","dark","App","currentPage","setCurrentPage","setCurrentFav","align","removeElement","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.de04c958.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/villain.2903413b.svg\";","module.exports = __webpack_public_path__ + \"static/media/dark.8c1b6441.jpg\";","import React from 'react'\r\nimport styled from \"styled-components\";\r\nimport darthVated from \"../assets/villain.svg\"\r\n\r\n\r\nconst StyledNav = styled.nav`\r\n    display: flex;\r\n        img{\r\n            width: 40px;\r\n        }\r\n        span{\r\n            padding: 5px;\r\n            cursor: pointer;\r\n            \r\n        }\r\n       \r\n        background-color: #6E6E6E;\r\n        height:  50px;\r\n        ul{\r\n            list-style-type: none;\r\n            margin: 0;\r\n            padding: 0;\r\n            padding-top: 15px;\r\n            padding-left: 25px;\r\n            li{\r\n                display:inline;\r\n                margin-left: 20px;\r\n                cursor: pointer;\r\n                color: white;\r\n            }\r\n            li:hover{\r\n                \r\n                border-bottom:1px solid red;\r\n            }\r\n        }\r\n    `\r\nexport default function Nav({changePage}) {\r\n   \r\n    return (\r\n        <StyledNav>\r\n            <span onClick={()=>changePage(\"home\")}><img src={darthVated} alt=\"\"/></span>\r\n            <ul>\r\n                <li onClick={()=>changePage(\"home\")}>Home</li>\r\n                <li onClick={ ()=> changePage(\"fav\")}>Favorites</li>\r\n            </ul>\r\n        </StyledNav>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from \"styled-components\";\r\n\r\n\r\n\r\nconst StyledContainer = styled.div`\r\n\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n    width: 85vw;\r\n    margin: auto;\r\n    margin-top: 50px;\r\n    grid-gap: 15px;\r\n    grid-row-gap: 30px;\r\n    justify-items: center;\r\n    @media (max-width: 1100px) { \r\n        grid-template-columns: 1fr 1fr 1fr ;\r\n    }\r\n    @media (max-width: 800px) { \r\n        grid-template-columns: 1fr 1fr ;\r\n    }\r\n    @media (max-width: 600px) { \r\n        grid-template-columns: 1fr ;\r\n    }\r\n`\r\nconst StyledCard = styled.div`\r\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\r\n    height: 120px;\r\n    width: 200px;\r\n    padding: 12px;\r\n    text-align: center;\r\n    background: #00000091;\r\n    color: white;\r\n    \r\n`\r\n\r\nconst StyledButton = styled.button`\r\n    border: 1px solid #ccc;\r\n    background: transparent;\r\n    height: 45px;\r\n    width: 140px;\r\n    margin-top: 15px;\r\n    transition: 0.3s ease-in-out;\r\n    border-radius: 3px;\r\n    color: white;\r\n    :hover{\r\n        background: #ccc;\r\n    }\r\n`\r\n\r\nexport default function Fav({currentFav,RemoveFavorite}) {\r\n    console.log('inFav', currentFav)\r\n\r\n    const elements = currentFav.map((e) => ( \r\n        <StyledCard  key={e.name}>\r\n          <div className='container'>\r\n           \r\n            <div>Name:{e.name}</div>\r\n            <div>Eye Color: {e.eye_color}</div>\r\n            <div>Age:{e.birth_year}</div>\r\n            <StyledButton onClick={()=> RemoveFavorite(e)}>\r\n              Remove from Favorites\r\n            </StyledButton>\r\n          </div>\r\n        </StyledCard>\r\n      ))\r\n  \r\n    return (\r\n        <div>\r\n            <StyledContainer>{elements}</StyledContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport styled from \"styled-components\";\r\n\r\n\r\n\r\nconst StyledContainer = styled.div`\r\n\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n    width: 85vw;\r\n    margin: auto;\r\n    margin-top: 50px;\r\n    grid-gap: 15px;\r\n    grid-row-gap: 30px;\r\n    justify-items: center;\r\n    overflow: scroll;\r\n    max-height: 550px;\r\n    overflow-x: hidden;\r\n    @media (max-width: 1100px) { \r\n        grid-template-columns: 1fr 1fr 1fr ;\r\n    }\r\n    @media (max-width: 800px) { \r\n        grid-template-columns: 1fr 1fr ;\r\n    }\r\n    @media (max-width: 600px) { \r\n        grid-template-columns: 1fr ;\r\n    }\r\n\r\n    .scroll-list::-webkit-scrollbar {\r\n  width: 0px;\r\n  background: transparent;\r\n}\r\n::-webkit-scrollbar {\r\n  width: 5px;\r\n}\r\n::-webkit-scrollbar-track {\r\n  background: rgba(70, 95, 111, 0.87);\r\n}\r\n::-webkit-scrollbar-thumb {\r\n  background: rgb(61, 60, 60);\r\n}\r\n`\r\nconst StyledCard = styled.div`\r\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\r\n    height: 120px;\r\n    width: 200px;\r\n    padding: 12px;\r\n    text-align: center;\r\n    background: #00000091;\r\n    color: white;\r\n   \r\n    \r\n`\r\n\r\nconst StyledButton = styled.button`\r\n    border: 1px solid #ccc;\r\n    background: transparent;\r\n    height: 30px;\r\n    width: 140px;\r\n    margin-top: 15px;\r\n    transition: 0.3s ease-in-out;\r\n    border-radius: 3px;\r\n    color: white;\r\n    \r\n    :hover{\r\n        background: #ccc;\r\n        cursor:pointer;\r\n    }\r\n`\r\n\r\n\r\n\r\n\r\nexport default function List({people,addFavPeople}) {\r\n    \r\n    const elements = people.map((e) => ( \r\n      <StyledCard  key={e.name}>\r\n        <div className='container'>\r\n         \r\n          <div>Name:{e.name}</div>\r\n          <div>Gender: {e.gender}</div>\r\n          <div>Born on:{e.birth_year}</div>\r\n          <StyledButton onClick={()=> addFavPeople(e)}>\r\n            Add To Favorites\r\n          </StyledButton>\r\n        </div>\r\n      </StyledCard>\r\n    ))\r\n    \r\n    return (\r\n        <div>\r\n            <StyledContainer>{elements}</StyledContainer>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect,useState} from 'react'\r\nimport styled from \"styled-components\";\r\nimport axios from 'axios'\r\nimport List from './List'\r\n\r\nconst StyledSearchArea = styled.div`\r\n    \r\n\r\n    width: 85vw;\r\n    margin: auto;\r\n    margin-top:20px;\r\n    input{\r\n        margin-left: 10px;\r\n        outline: none;\r\n        border: none;\r\n        border-bottom: 1px solid black;\r\n        background: transparent;\r\n        margin-right: 23px;\r\n}\r\n    }\r\n`\r\nconst tempPeople = []\r\nexport default function Home({currentFavorite}) {\r\n    const url = 'http://swapi.dev/api/people/'\r\n    const [people, setPeople] = useState([])\r\n    const [input, setInput] = useState('')\r\n      useEffect(() => {\r\n        temp2 = []\r\n        peopleApi(setPeople,url)\r\n      }, [])\r\n     \r\n      function addFavPeople(element){\r\n        if (tempPeople.some((el) => el.name === element.name)) {\r\n            // check if element already exist in the list\r\n            window.alert('already exists')\r\n          } else {\r\n            let bin = []\r\n            bin = [...bin, element] // set new element in bin\r\n            tempPeople.push(...bin) // save it in global binForPeople to keep data\r\n            currentFavorite([...tempPeople])\r\n          }\r\n      }\r\n   \r\n      const filterList = people\r\n      .filter(\r\n        (el) =>\r\n          el.name.toLowerCase().match(input.toLowerCase()) || \r\n          el.gender.toLowerCase().match(input.toLowerCase()) ||\r\n          el.birth_year.toLowerCase().match(input.toLowerCase())\r\n      )\r\n    return (\r\n        <div>\r\n            <StyledSearchArea>\r\n            <label htmlFor=\"search\">Search People: </label>\r\n            <input value={input} onChange={(e) => setInput(e.target.value)} name=\"search\"></input>\r\n            \r\n            </StyledSearchArea>\r\n            \r\n            <List people={filterList} addFavPeople={(x) => addFavPeople(x)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nlet temp2 = []\r\nfunction peopleApi(setPeople,url){\r\n   axios\r\n   .get(`${url}`)\r\n   .then((res) => {\r\n     temp2.push(...res.data.results)\r\n     \r\n     setPeople([...temp2])\r\n     \r\n     if (res.data.next !== null) {\r\n       peopleApi(setPeople,res.data.next)\r\n       \r\n     }\r\n    \r\n   })\r\n   .catch((error) => console.log(error))\r\n }  ","import React, {useState} from 'react';\nimport Nav from './components/Nav'\nimport Fav from './components/Fav'\nimport Home from './components/Home'\nimport dark from './assets/dark.jpg'\nimport styled from \"styled-components\";\n\nconst Content = styled.div `\n\nbackground-image: url(${dark});\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  min-height: 93vh;\n  max-height: 110vh;\n  \n  h1{\n    margin-top: 0;\n    padding-top: 20px;\n  }\n`\n\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState(\"home\")\n  const [currentFav, setCurrentFav] = useState([])\n  \n  function changePage(page){\n    setCurrentPage(page)\n  }\n  function currentFavorite(favList){\n    setCurrentFav(favList)\n  }\n\n  function RemoveFavorite(removeElement){\n    console.log(removeElement)\n  }\n  return (\n    <div className=\"App\">\n     \n     <Nav changePage={(e) => changePage(e)}/>\n     <Content>\n     <h1 align=\"center\">STAR WARS API</h1>\n     {currentPage === 'home' ?<Home currentFavorite={(e)=>currentFavorite(e)}/>:<Fav currentFav={currentFav}  RemoveFavorite={(e)=>RemoveFavorite(e)}/>}\n     </Content>\n    </div>\n  );\n}   \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n   \n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}